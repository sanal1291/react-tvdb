{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","propType","PropType","string","Grid","header","children","Image","Thumb","movieId","clickable","bool","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","currentTarget","value","func","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","console","log","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","index","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","Actor","character","imageurl","MovieInfoBar","budget","revenue","Movie","fetchData","useCallback","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","basename","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05cb60b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width:var(--maxWidth);\r\n    padding: 20px 0 ;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n    width:200px;\r\n\r\n    @media screen and (max-width:500px){\r\n        width: 100px;\r\n    }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n    width:100px;\r\n\r\n    @media screen and (max-width:500px){\r\n        width: 80px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from \"./Header.styles\";\r\n\r\nconst Header = () => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n                <LogoImg src={RMDBLogo} alt='rmdb-log' />\r\n            </Link>\r\n            <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nexport default Header;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    background:linear-gradient(\r\n        to bottom, rgba(0, 0,0,0)\r\n        41%, rgba(0,0,0,0.65)\r\n        100%\r\n    ),\r\n    url(${({ image }) => image}), var(--darkGrey);\r\n    background-size:100%, conver;\r\n    background-position: center;\r\n    height:600px;\r\n    position: relative;\r\n    animation:animateHeroImage 1s;\r\n\r\n    @keyframes animateHeroImage{\r\n        from{\r\n            opacity:0;\r\n        }\r\n        to{\r\n            opacity:1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    padding:20px;\r\n    max-width:var(--maxWidth);\r\n    margin:0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    z-index:100;\r\n    max-width:700px;\r\n    position:absolute;\r\n    bottom:40px;\r\n    margin-right:20px;\r\n    min-height:100px;\r\n    color: var(--white);\r\n\r\n    h1{\r\n        font-size:var(--fontSuperBig);\r\n\r\n        @media screen and (max-width: 720px) {\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n    p{\r\n        font-size:var(--fontMed);\r\n\r\n        @media screen and (max-width:720px){\r\n            font-size:var(--fontSmall);\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width:720px){\r\n        max-width:100%;\r\n    }\r\n`;","import React from 'react'\r\nimport PropType from 'prop-types';\r\n// styles\r\nimport { Wrapper, Content, Text } from './HeroImage.styles';\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n    <Wrapper image={image}>\r\n        <Content>\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nHeroImage.propType = {\r\n    image: PropType.string,\r\n    title: PropType.string,\r\n    text: PropType.string\r\n}\r\n\r\nexport default HeroImage;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: width var(--maxWidth);\r\n    margin: 0 auto;\r\n    padding: 0 20px;\r\n\r\n    h1{\r\n        color: var(--medGrey);\r\n\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n\r\n`;\r\nexport const Content = styled.div`\r\n    display:grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    grid-gap: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport PropType from 'prop-types';\r\n\r\n// styles\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n)\r\n\r\nGrid.propTypes = {\r\n    header: PropType.string,\r\n\r\n}\r\n\r\nexport default Grid;","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n    width:100%;\r\n    max-width:720px;\r\n    transition: all 0.3s;\r\n    object-fit:cover;\r\n    border-radius:20px;\r\n    animation: animateThumb 0.5s;\r\n    \r\n    :hover{\r\n        opacity:0.8;\r\n    }\r\n    \r\n    @keyframes animateThumb{\r\n        from{\r\n            opacity:0;\r\n        }\r\n        to{\r\n            opacity:1;\r\n        }\r\n    }\r\n`;","import React from 'react'\r\nimport PropType from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// styles\r\nimport { Image } from './Thumb.styles';\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n    <div>\r\n        {clickable ? (\r\n            <Link to={`/${movieId}`}>\r\n                <Image src={image} alt='movie-thumg' />\r\n            </Link>\r\n        )\r\n            : (\r\n                <Image src={image} alt='movie-thumg' />\r\n            )}\r\n    </div>\r\n)\r\n\r\nThumb.propType = {\r\n    image: PropType.string,\r\n    movieId: PropType.string,\r\n    clickable: PropType.bool\r\n}\r\n\r\nexport default Thumb;\r\n\r\n","import { Spinner } from \"./Spinner.styles\";\r\n\r\nexport default Spinner;","import styled from \"styled-components\";\r\n\r\nexport const Spinner = styled.div`\r\n    border: 5px solid var(--lighGrey);\r\n    border-top: 5px solid var(--medGrey);\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    animation: spin 0.8s linear infinite;\r\n    margin: 20px auto;\r\n\r\n    @keyframes spin{\r\n        0%{\r\n            transform: rotate(0deg);\r\n        }\r\n        100%{\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n`;","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    height:100px;\r\n    background:var(--darkGrey);\r\n    padding: 0 20px;\r\n\r\n`;\r\nexport const Content = styled.div`\r\n    position:relative;\r\n    max-width: var(--maxWidth);\r\n    width:100%;\r\n    height:55px;\r\n    background:var(--medGrey);\r\n    margin: 0 auto;\r\n    border-radius: 40px;\r\n    color: var(--white);\r\n\r\n    img{\r\n        position:absolute;\r\n        left:15px;\r\n        top:14px;\r\n        width:30px;\r\n    }\r\n    input{\r\n        font-size: 28px;\r\n        position: absolute;\r\n        left:0;\r\n        margin: 8px;\r\n        padding: 0 0 0 60px;\r\n        border:0;\r\n        width:95%;\r\n        background:transparent;\r\n        height: 40px;\r\n        color:var(--white);\r\n        \r\n        :focus{\r\n            outline:none;\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropType from 'prop-types';\r\n// image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n// styles \r\nimport { Wrapper, Content } from './SearchBar.styles';\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n\r\n    useEffect(() => {\r\n        if (initial.current) {\r\n            initial.current = false;\r\n            return;\r\n        }\r\n\r\n        const timer = setTimeout(() => {\r\n            setSearchTerm(state);\r\n        }\r\n            , 500);\r\n        return () => clearTimeout(timer);\r\n    }, [setSearchTerm, state])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={searchIcon} alt='search-icon' />\r\n                <input type=\"text\"\r\n                    placeholder=\"Search Movie\"\r\n                    onChange={e => setState(e.currentTarget.value)}\r\n                    value={state}\r\n                />\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nSearchBar.propType = {\r\n    setSearchTerm: PropType.func,\r\n}\r\n\r\nexport default SearchBar;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.button`\r\n    display: block;\r\n    background: var(--darkGrey);\r\n    width: 25%;\r\n    min-width: 200px;\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px auto;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hove{\r\n        opacity:0.7;\r\n    }\r\n`;","import React from 'react';\r\nimport PropType from 'prop-types';\r\n// styles\r\nimport { Wrapper } from './Button.styles';\r\n\r\nconst Button = ({ text, callback }) => (\r\n    <Wrapper type=\"button\" onClick={callback}>\r\n        {text}\r\n    </Wrapper>\r\n)\r\n\r\nButton.propType = {\r\n    text: PropType.string,\r\n    callback: PropType.func,\r\n}\r\n\r\nexport default Button;","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n}","import { useState, useEffect } from \"react\";\r\n\r\nimport API from '../API';\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pages: 0,\r\n    total_results: 0\r\n}\r\n\r\nexport const useHomeFetch = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [state, setState] = useState(initialState);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n    const fetchMovies = async (page, searchTerm = \"\") => {\r\n        try {\r\n            setError(false);\r\n            setLoading(true);\r\n\r\n            const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n            setState(prev => ({\r\n                ...movies,\r\n                results:\r\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n            }))\r\n        } catch (error) {\r\n            setError(true);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    //Initial and search\r\n    useEffect(() => {\r\n        if (!searchTerm) {\r\n            const sessionState = isPersistedState('homeState');\r\n            if (sessionState) {\r\n                console.log(\"from session storage\");\r\n                setState(sessionState);\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"from api\");\r\n        setState(initialState);\r\n        fetchMovies(1, searchTerm);\r\n    }, [searchTerm])\r\n\r\n    // loadmore\r\n    useEffect(() => {\r\n        if (!isLoadingMore) return;\r\n\r\n        fetchMovies(state.page + 1, searchTerm);\r\n        setIsLoadingMore(false);\r\n    }, [isLoadingMore, searchTerm, state.page])\r\n\r\n    // write to session storage\r\n    useEffect(() => {\r\n        if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\r\n    }, [searchTerm, state])\r\n\r\n    return {\r\n        state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react';\r\n//API\r\n// Config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\r\n// components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n// Hook\r\nimport { useHomeFetch } from '../hooks/useHomeFetch'\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Home = () => {\r\n    const { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore } = useHomeFetch();\r\n\r\n    console.log(state);\r\n    if (error) return <div>something went wrong ...</div>\r\n    return (\r\n        <>\r\n            {!searchTerm && state.results[0] ?\r\n                <HeroImage image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                    title={state.results[0].original_title}\r\n                    text={state.results[0].overview}\r\n                /> :\r\n                null\r\n            }\r\n            <SearchBar setSearchTerm={setSearchTerm} />\r\n            <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n                {state.results.map((movie, index) => (\r\n                    <Thumb key={index}\r\n                        clickable\r\n                        image={\r\n                            movie.poster_path\r\n                                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                                : NoImage\r\n                        }\r\n                        movieId={movie.id}\r\n                    />\r\n                ))}\r\n\r\n            </Grid>\r\n            {loading && <Spinner />}\r\n            {state.page < state.total_pages && !loading && (\r\n                <Button text='Load More' callback={() => setIsLoadingMore(true)} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    width:100%;\r\n    height:70px;\r\n    background: var(--medGrey);\r\n    color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display:flex;\r\n    width:100%;\r\n    max-width: var(--maxWidth);\r\n    padding: 0 20px;\r\n\r\n    span{\r\n        font-size: var(--fontMed);\r\n        color: var(--white);\r\n        padding-right:10px;\r\n\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontSmall);\r\n        }\r\n    }\r\n`;","import React from 'react'\r\nimport PropType from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n//syles\r\nimport { Wrapper, Content } from './BreadCrumb.styles'\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to=\"/\">\r\n                <span>Home</span>\r\n            </Link>\r\n            <span>|</span>\r\n            <span>{movieTitle}</span>\r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nBreadCrumb.propTypes = {\r\n    movieTitle: PropType.string\r\n}\r\n\r\nexport default BreadCrumb;","import styled from \"styled-components\";\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\nexport const Wrapper = styled.div`\r\n    background:${({ backdrop }) =>\r\n        backdrop ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop}')`\r\n            : '#000'\r\n    };\r\n    background-size: cover;\r\n    background-position: center;\r\n    padding: 40px 20px;\r\n    animation: animateMovieInfo 1s;\r\n\r\n    @keyframes animateMovieInfo{\r\n        from{\r\n            opacity:0;\r\n        }\r\n        to{\r\n            opacity:1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display:flex;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    background: rgba(0,0,0,0.7);\r\n    border-radius:20px;\r\n\r\n    @media screen and (max-width: 768px){\r\n        display:block;\r\n        max-height: none;\r\n    }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    width: 100%;\r\n    padding: 20px 40px;\r\n    color: var(--white);\r\n    overflow: hidden;\r\n\r\n    .rating-directors{\r\n        display:flex;\r\n        justify-content: flex-start;\r\n    }\r\n    .score{\r\n        display:flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 35px;\r\n        height: 35px;\r\n        background: #fff;\r\n        color: #000;\r\n        font-weight: 800;\r\n        border-radius: 50%;\r\n        margin:0;\r\n    }\r\n    .director{\r\n        margin: 0 0 0 40px;\r\n        p{\r\n            margin:0;\r\n        }\r\n    h1{\r\n        @media screen and (max-width: 768px) {\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n    }\r\n`;\r\n","import React from 'react'\r\nimport PropType from 'prop-types';\r\n// components\r\nimport Thumb from '../Thumb'\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n// image\r\nimport NoImage from '../../images/no_image.jpg';\r\n// styles\r\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n        <Content>\r\n            <Thumb\r\n                image={\r\n                    movie.poster_path\r\n                        ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                        : NoImage\r\n                }\r\n                clickable={false}\r\n            />\r\n            <Text>\r\n                <h1>{movie.title}</h1>\r\n                <h3>PLOT</h3>\r\n                <p>{movie.overview}</p>\r\n\r\n                <div className=\"rating-directors\">\r\n                    <div>\r\n                        <h3>RATING</h3>\r\n                        <div className=\"score\">{movie.vote_average}</div>\r\n                    </div>\r\n                    <div className='director'>\r\n                        <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n                        {movie.directors.map((director, index) => (\r\n                            <p key={index}>{director.name}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nMovieInfo.propTypes = {\r\n    movie: PropType.object\r\n}\r\n\r\nexport default MovieInfo;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    color: var(--white);\r\n    background: var(--darkGrey);\r\n    border-radius: 20px;\r\n    padding:5px;\r\n    text-align:center;\r\n    h3{\r\n        margin: 10px 0 0 0;\r\n    }\r\n    p{\r\n        margin: 5px 0;\r\n    }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    display:block;\r\n    width:100%;\r\n    height: 200px;\r\n    object-fit:cover;\r\n    border-radius:15px;\r\n`;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Wrapper, Image } from './Actor.styles'\r\n\r\nconst Actor = ({ name, character, imageurl }) => (\r\n    <Wrapper>\r\n        <Image src={imageurl} alt='actor-thumb' />\r\n        <h3>{name}</h3>\r\n        <p>{character}</p>\r\n    </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string,\r\n    character: PropTypes.string,\r\n    imageurl: PropTypes.string,\r\n}\r\n\r\nexport default Actor;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    min-height:100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .column{\r\n        display:flex;\r\n        align-items:center;\r\n        justify-content:center;\r\n        background: var(--medGrey);\r\n        border-radius: 20px;\r\n        margin: 0 20px;\r\n        flex:1;\r\n        :first-child{\r\n            margin-left: 0;\r\n        }\r\n        ::last-child{\r\n            margin-right:0;\r\n        }\r\n    }\r\n    @media screen and (max-width: 768px){\r\n        display:block;\r\n\r\n        .column{\r\n            margin:20px 0;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport PropType from 'prop-types';\r\n//helper\r\nimport { calcTime, convertMoney } from '../../helpers';\r\n// styles\r\nimport { Wrapper, Content } from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <div className=\"column\">\r\n                <p>Running time: {calcTime(time)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Budget: {convertMoney(budget)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Revenue: {convertMoney(revenue)}</p>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nMovieInfoBar.propTypes = {\r\n    time: PropType.number,\r\n    budget: PropType.number,\r\n    revenue: PropType.number\r\n}\r\n\r\nexport default MovieInfoBar;","import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\n// config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n// components\r\nimport BreadCrumb from './BreadCrumb';\r\nimport MovieInfo from './MovieInfo';\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport Actor from './Actor';\r\n\r\n// Hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n// image\r\nimport NoImage from '../images/no_image.jpg';\r\nimport MovieInfoBar from './MovieInfoBar';\r\n\r\n\r\nconst Movie = () => {\r\n    const { movieId } = useParams();\r\n\r\n    const { state: movie, loading, error } = useMovieFetch(movieId);\r\n    if (loading) return <Spinner />\r\n    if (error) return <div>Something went wrong...</div>\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar\r\n                time={movie.runtime}\r\n                budget={movie.budget}\r\n                revenue={movie.revenue}\r\n\r\n            />\r\n            <Grid header='Actors'>\r\n                {movie.actors.map((actor, index) => (\r\n                    <Actor\r\n                        key={index}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageurl={\r\n                            actor.profile_path\r\n                                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                                : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Movie;","import { useState, useEffect, useCallback } from \"react\";\r\nimport API from '../API';\r\nimport { isPersistedState } from '../helpers'\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const fetchData = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(false);\r\n\r\n            const movie = await API.fetchMovie(movieId);\r\n            const credits = await API.fetchCredits(movieId);\r\n            // get directors only\r\n            const directors = credits.crew.filter(\r\n                member => member.job === 'Director'\r\n            );\r\n            setState({\r\n                ...movie,\r\n                actors: credits.cast,\r\n                directors\r\n            })\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setError(true);\r\n        }\r\n    }, [movieId]);\r\n\r\n    useEffect(() => {\r\n        const sessionState = isPersistedState(movieId);\r\n        if (sessionState) {\r\n            setState(sessionState);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        fetchData();\r\n    }, [movieId, fetchData])\r\n\r\n    useEffect(() => {\r\n        sessionStorage.setItem(movieId, JSON.stringify(state));\r\n    }, [movieId, state])\r\n\r\n\r\n\r\n    return { state, loading, error }\r\n}","import React from 'react'\r\n// styles\r\n\r\nconst NotFound = () => <div>Not found</div>\r\n\r\nexport default NotFound;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root{\r\n        --maxWidth: 1280px;\r\n        --white: #ddd;\r\n        --lightGrey: #eee;\r\n        --medGrey: #353535;\r\n        --darkGrey: #1c1c1c;\r\n        --fontSuperBig: 2.5rem;\r\n        --fontBig: 1.5rem;\r\n        --fontMed: 1.2rem;\r\n        --fontSmall: 1rem;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n        font-family:'Abel', sans-serif;\r\n    }\r\n    body{\r\n        margin:0;\r\n        padding:0;\r\n        h1{\r\n            font-size:2rem;\r\n            font-weight:600;\r\n            color:var(--white);\r\n        }\r\n        h3{\r\n            font-size:1.1rem;\r\n            font-weight:600;\r\n        }\r\n        p{\r\n            font-size:1rem;\r\n            color:var(--white);\r\n        }\r\n        a{\r\n            text-decoration:none\r\n        }\r\n    }\r\n\r\n`;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n//styles\nimport { GlobalStyle } from './GlobalStyle';\n\n\nconst App = () => (\n  <Router basename=\"/react-tvdb\">\n    <Header />\n    <Routes>\n      <Route path='/' element={<Home />} />\n      <Route path='/:movieId' element={<Movie />} />\n      <Route path='/*' element={<NotFound />} />\n    </Routes>\n    <GlobalStyle />\n  </Router>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}